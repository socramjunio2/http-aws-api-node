// tslint:disable

export const messagesPtBr = {
  "alternatives.all": "Valor não corresponde a todos os tipos necessários",
  "alternatives.any": "Valor não corresponde a nenhum dos tipos permitidos",
  "alternatives.match": "Valor não corresponde a nenhum dos tipos permitidos",
  "alternatives.one": "Valor corresponde a mais de um tipo permitido",
  "alternatives.types": "Valor deve ser um dos {{#types}}",
  "any.custom": "Valor falha na validação personalizada por causa {{#error.message}}",
  "any.default": "Valor gerou um erro ao executar o método padrão",
  "any.failover": "Valor gerou um erro ao executar o método failover",
  "any.invalid": "Valor é inválido",
  "any.required": "Valor é obrigatório",
  "any.unknown": "Valor não é permitido",
  "any.only": "Valor deve ser {if(#valids.length == 1, '', '')}{{#valids}}",
  "any.ref": "{{#arg}} referencias {{#ref}} que {{#reason}}",
  "array.base": "Valor deve ser um array",
  "array.excludes": "Valor já foi excluído",
  "array.hasKnown": "Valor não contém pelo menos uma correspondência obrigatória para o tipo `{#patternLabel}`",
  "array.hasUnknown": "Valor não contém pelo menos uma correspondência obrigatória",
  "array.includes": "Valor não corresponde a nenhum dos tipos permitidos",
  "array.includesRequiredBoth": "Valor não contém {{#knownMisses}} e {{#unknownMisses}} outro(s) valor(es) obrigatórios",
  "array.includesRequiredKnowns": "Valor não contém {{#knownMisses}}",
  "array.includesRequiredUnknowns": "Valor não contém {{#unknownMisses}} valor(es) obrigatórios",
  "array.length": "Valor deve conter {{#limit}} items",
  "array.max": "Valor deve conter menor ou igual a {{#limit}} items",
  "array.min": "Valor deve conter ao menos {{#limit}} items",
  "array.orderedLength": "Valor deve conter no máximo {{#limit}} items",
  "array.sort": "Valor deve ser classificada em {#order} ordernada por {{#by}}",
  "array.sort.mismatching": "Valor não pode ser ordenado devido a tipos incompatíveis",
  "array.sort.unsupported": "Valor não pode ser ordenado devido ao tipo não suportado {#type}",
  "array.sparse": "Valor não deve ser um item de matriz esparsa",
  "array.unique": "Valor contém um valor duplicado",
  "binary.base": "Valor deve ser um buffer ou uma string",
  "binary.length": "Valor deve ter {{#limit}} bytes",
  "binary.max": "Valor deve ser menor ou igual a {{#limit}} bytes",
  "binary.min": "Valor deve ser ao menos {{#limit}} bytes",
  "boolean.base": "Valor deve ser um booleano",
  "date.base": "Valor deve ser uma data válida",
  "date.format": "Valor deve estar nesse formato {msg(`date.format.` + #format) || #format}",
  "date.greater": "Valor deve ser maior que `{{#limit}}`",
  "date.less": "Valor deve ser menor que `{{#limit}}`",
  "date.max": "Valor deve ser menor ou igual a `{{#limit}}`",
  "date.min": "Valor deve ser maior ou igual a `{{#limit}}`",
  "date.format.iso": "Data deve estar no formato ISO 8601",
  "date.format.javascript": "Valor dever ser timestamp ou número em milissegundos",
  "date.format.unix": "Valor dever ser timestamp ou número em segundos",
  "function.arity": "Valor deve ter uma aridade de {{#n}}",
  "function.class": "Valor deve ser uma classe",
  "function.maxArity": "Valor deve ter uma aridade menor ou igual a {{#n}}",
  "function.minArity": "Valor deve ter uma aridade maior ou igual a {{#n}}",
  "number.base": "Valor deve ser um número",
  "number.greater": "Valor deve ser maior que {{#limit}}",
  "number.infinity": "Valor não pode ser infinito",
  "number.integer": "Valor deve ser um integer",
  "number.less": "Valor deve ser menor que {{#limit}}",
  "number.max": "Valor deve ser menor que ou igual a {{#limit}}",
  "number.min": "Valor deve ser maior ou igual a {{#limit}}",
  "number.multiple": "Valor deve ser um multiplo de {{#multiple}}",
  "number.negative": "Valor deve ser um número negativo",
  "number.port": "Valor deve ser uma porta válida",
  "number.positive": "Valor deve ser um número positivo",
  "number.precision": "Valor não deve ter mais que {{#limit}} casas decimais",
  "number.unsafe": "Valor deve ser um número",
  "object.and": "Valor contém {{#presentWithLabels}} sem seus pares necessários {{#missingWithLabels}}",
  "object.assert": "Valor é inválido por causa {if(#subject.key, `` + #subject.key + ` falhei em ` + (#message || `passar no teste de afirmação`), #message || ` a afirmação falhou`)}",
  "object.base": "Valor deve ser do tipo {{#type}}",
  "object.instance": "Valor deve ser uma instância de `{{#type}}`",
  "object.length": "Valor deve ter {{#limit}} chave{if(#limit == 1, ``, `s`)}",
  "object.max": "Valor deve ser menor ou igual a{{#limit}} chaves{if(#limit == 1, ``, `s`)}",
  "object.min": "Valor deve conter ao menos {{#limit}} chaves{if(#limit == 1, ``, `s`)}",
  "object.missing": "Valor deve conter pelo menos um dos {{#peersWithLabels}}",
  "object.nand": "`{{#mainWithLabel}}` não deve existir simultaneamente com {{#peersWithLabels}}",
  "object.oxor": "Valor contém um conflito entre pares exclusivos opcionais {{#peersWithLabels}}",
  "object.pattern.match": "Valores chaves falharam em atender aos requisitos padrões",
  "object.refType": "Valor deve ser uma referência Joi",
  "object.regex": "Valor deve ser um objeto RegExp",
  "object.rename.multiple": "Valor não pode ser renomeado `{{#from}}` porque multiplas renomeações estão desabilitadas e outra chave já foi renomeada para`{{#to}}`",
  "object.rename.override": "Valor não pode renomeado `{{#from}}` porque as renomeações estão desativada e o destino `{{#to}}` já existe",
  "object.schema": "Valor deve ser um esquema Joi de tipo {{#type}}",
  "object.unknown": "Valor não é permitido",
  "object.with": "`{{#mainWithLabel}}` falta do par necessário `{{#peerWithLabel}}`",
  "object.without": "`{{#mainWithLabel}}` conflito com pares proibidos `{{#peerWithLabel}}`",
  "object.xor": "Valor contém um conflito entre pares exclusivos {{#peersWithLabels}}",  
  "string.alphanum": "Valor deve conter apenas caracteres alfanuméricos",
  "string.base": "Valor deve ser uma string",
  "string.base64": "Valor deve ser uma string base64 válida",
  "string.creditCard": "Valor deve ser um cartão de crédito válido",
  "string.dataUri": "Valor deve ser uma string dataUri válida",
  "string.domain": "Valor deve conter um nome de dominio válido",
  "string.email": "Valor deve ser um e-mail válido",
  "string.empty": "Valor não é permitido ser vazio",
  "string.guid": "Valor deve ser um GUID válido",
  "string.hex": "Valor deve conter apenas caracteres hexadecimais",
  "string.hexAlign": "Representação decodificada hexadecimal deve ser alinhada por bytes",
  "string.hostname": "Valor deve ser um hostname válido",
  "string.ip": "Valor deve ser um endereço IP válido com um {{#cidr}} CIDR",
  "string.ipVersion": "Valor deve ser um endereço IP válido de uma das seguintes versões {{#version}} com uma {{#cidr}} CIDR",
  "string.isoDate": "Valor deve ser no formato ISO",
  "string.isoDuration": "Valor deve ter uma duração ISO 8601 válida",
  "string.length": "Valor deve ter {{#limit}} caracteres",
  "string.lowercase": "Valor deve conter apenas caracteres minúsculos",
  "string.max": "Valor deve ser menor ou igual a {{#limit}} caracteres",
  "string.min": "Valor deve conter ao menos {{#limit}} caracteres",
  "string.normalize": "Valor deve ser unicode normalizado no formato {{#form}}",
  "string.token": "Valor deve conter apenas caracteres alfanuméricos e sublinhados",
  "string.pattern.base": "Valor {[.]} falha ao corresponder ao padrão necessário",
  "string.pattern.name": "Valor {[.]} falha em corresponder ao {{#name}} padronizado",
  "string.pattern.invert.base": "Valor {[.]} corresponde ao padrão invertido",
  "string.pattern.invert.name": "Valor {[.]} corresponde ao {{#name}} padrão invertido",
  "string.trim": "Valor não deve ter espaços em branco à esquerda ou à direita",
  "string.uri": "Valor deve ser um uri válido",
  "string.uriCustomScheme": "Valor deve ser um uri válido com um esquema {{#scheme}} que corresponda ao padrão",
  "string.uriRelativeOnly": "Valor deve ser um uri relativo válido",
  "string.uppercase": "Valor deve conter apenas caracteres maiúsculos",
  "symbol.base": "Valor deve ser um simbolo",
  "symbol.map": "Valor deve ser um dos {{#map}}",
};

// tslint:enable
